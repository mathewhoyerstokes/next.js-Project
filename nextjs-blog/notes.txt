# PRE RENDERING AND DATA FETCHING #

- Pre Rendering - By default next.js pre renders every page, this means next.js generates HTML for each page in advance,
instead of having it done by client-side JS.

- Static Generation is the pre-rendering method that generates the HTML at build time. The pre-rendered HTML is then reused on each request.

    - Static generation can be used for many types of pages, including
        - Marketing Posts
        - Blog Posts
        - E-commerce product listings
        - Help and Docs

    - Static generation with data using 'getStaticProps'
        - getStaticProps runs at build time in production

        - essentially getStaticProps allows you to tell next.js "Hey, this page has some data dependencies,
          so when you pre render the page, make sure that you resolve them first"

        - Inside the function you can fetch external data and send it to the page.
        ___________________________________________________

        export default function Home(props) { ... }

        export async function getStaticProps() {
          // Get external data from the file system, API, DB, etc.
          const data = ...

          // The value of the `props` key will be
          //  passed to the `Home` component
          return {
            props: ...
          }
        }
        _____________________________________________________________

- Server-side Rendering is the pre-rendering method that generates the HTML on each request.

- it is recommended to use static generation (with or without data) whenever possible because your page can be built once and served by CDN,
  which makes it much faster then having a server render the page on every request

- You should ask yourself: "Can I pre-render this page ahead of a user's request?" If the answer is yes, then you should choose Static
  Generation.

- On the other hand, Static Generation is not a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.

- In that case, you can use Server-side Rendering. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate frequently updated data.


Fetch External API or Query Database
- We have implemented getSortedPostsData which fetches data from a file system, but you can also fetch data from other sources,
  like an external API endpoint.

  API ENDPOINT
  ________________________________

  export async function getSortedPostsData() {
    // Instead of the file system,
    // fetch post data from an external API endpoint
    const res = await fetch('..')
    return res.json()

  ________________________________


  DB DIRECTLY
   ________________________________

    import someDatabaseSDK from 'someDatabaseSDK'

    const databaseClient = someDatabaseSDK.createClient(...)

    export async function getSortedPostsData() {
      // Instead of the file system,
      // fetch post data from a database
      return databaseClient.query('SELECT posts...')
    }

    ________________________________

    - get StaticProps only runs Server side it will never run client sid, this means you can write direct
      DB queries without it being sent to browsers

      -
Pre-rendering and Data Fetching
getStaticProps Details
Here is some essential information you should know about getStaticProps.

Fetch External API or Query Database
In lib/posts.js, we’ve implemented getSortedPostsData which fetches data from the file system. But you can fetch the data from other sources, like an external API endpoint, and it’ll work just fine:

export async function getSortedPostsData() {
  // Instead of the file system,
  // fetch post data from an external API endpoint
  const res = await fetch('..')
  return res.json()
}
Note: Next.js polyfills fetch() on both the client and server. You don't need to import it.

You can also query the database directly:

import someDatabaseSDK from 'someDatabaseSDK'

const databaseClient = someDatabaseSDK.createClient(...)

export async function getSortedPostsData() {
  // Instead of the file system,
  // fetch post data from a database
  return databaseClient.query('SELECT posts...')
}
This is possible because getStaticProps only runs on the server-side. It will never run on the client-side. It won’t even be included in the JS bundle for the browser. That means you can write code such as direct database queries without them being sent to browsers.

Development vs. Production:

    - In development (npm run dev or yarn dev), getStaticProps runs on every request.

    - In production, getStaticProps runs at build time. However, this behavior can be enhanced using the fallback key returned by getStaticPaths
    Because it’s meant to be run at build time, you won’t be able to use data that’s only available during request time, such as query parameters or HTTP headers.


Only Allowed in a Page:

    - getStaticProps can only be exported from a page. You can’t export it from non-page files.

    - One of the reasons for this restriction is that React needs to have all the required data before the page is rendered.


What If I Need to Fetch Data at Request Time?

    - Static Generation is not a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.

    - In cases like this, you can try Server-side Rendering or skip pre-rendering. Let’s talk about these strategies before we move on to the next lesson.

Fetching data at Request Time

    - if you need to fetch data at request time use Server-Side rendering
    - you need to export getServerSideProps instead of getStaticProps from your page.
    __________________

    export async function getServerSideProps(context) {
      return {
        props: {
          // props for your component
        }
      }
    }
    ____________________

    - Because getServerSideProps is called at request time, its parameter (context) contains request specific parameters.

    - You should use getServerSideProps only if you need to pre-render a page whose data must be fetched at request time. Time to first byte (TTFB) will be slower than getStaticProps because

    - the server must compute the result on every request, and the result cannot be cached by a CDN without extra configuration.


Client side Rendering

    - Use if you do not need to pre render your data
    - Statically generate (Pre-Render) parts of your page that do not require external data.
    - When the page loads, fetch external data from the client using JS and populate the remaining parts.
    - This approach works best for example a 'Dashboard' whose data is updating frequently, which requires request time data fetching.

SWR

The team behind Next.js has created a React hook for data fetching called SWR. We highly recommend it if you’re fetching data on
the client side. It handles caching, revalidation, focus tracking, refetching on interval, and more. We won’t cover the
details here, but here’s an example usage:

__________________________

import useSWR from 'swr'

function Profile() {
  const { data, error } = useSWR('/api/user', fetch)

  if (error) return <div>failed to load</div>
  if (!data) return <div>loading...</div>
  return <div>hello {data.name}!</div>
}
__________________________



